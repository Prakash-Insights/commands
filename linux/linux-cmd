sudo nautilus  #USB HDD open with root permission

hostname -I  # IP addredd
uname -a  # Linux version details
uname -r # Linux OS version
uname -m # 32 or 64 bit OS
lsb_release -a # Check ubuntu vresion 
cat /etc/lsb-release # Check ubuntu vresion details
cat /etc/os-release   # Check ubuntu vresion details

# RHEL/CentOS/Fedora 
cat /etc/redhat-release  # if Cent OS version
dnf update -y  # Cent OS update
dnf --version
dnf search apache2
systemctl status httpd  # RHEL/CentOS/Fedora 
systemctl status mysqld # MySQL status
sudo systemctl stop httpd
sudo systemctl start httpd
sudo systemctl restart httpd
sudo systemctl reload httpd 
sudo systemctl disable httpd
sudo systemctl enable httpd
sudo yum install httpd # sudo yum update httpd
vi /etc/httpd/conf.d/server-status.conf  
# vi etc/apache2/conf.d/http2.conf
yum install links
apachectl status
ps -eo comm,etime,user | grep httpd
ps -eo comm,etime,user | grep root | grep httpd


# alpine/busybox OS/image
apk add = apt install = apt-get install
apk add --update go=1.16.3
apk update/upgrade = apt update/upgrade
apk del = apt remove
# apk add is working in alpine/busybox docker image

# see all the PPAs 
ls /etc/apt/sources.list.d
# Look for your desire PPA here and then remove the .list
sudo rm -i /etc/apt/sources.list.d/PPA_Name.list
# Remove PPA from list
sudo add-apt-repository --remove ppa:PPA_Name/ppa

--------------------  
Github process
git config --global credential.helper cache 
git config credential.helper store
git config --global credential.https://github.com.username foo 
git clone https://github.com/foo/repository.git 

git config --global user.name "ABC"
git config --global user.email "ABC"
cd in git-folder: git config github.token "xxxxxxxxxxxxxxxxxxxxxxxx"
git config --list

git reset --hard && git clean -fd && git pull 

#---------------tested for 600sec
#Make Git store the username and password and it will never ask for them.
git config --global credential.helper store
#Save the username and password for a session (cache it);
git config --global credential.helper cache
#You can also set a timeout for the above setting
git config --global credential.helper 'cache --timeout=600'
#---------------

// If you have done some changes in dev branch, but not-push yet
// you can force checkout to new branch with changes
git checkout -b h-ctas
git push --set-upstream origin h-ctas

# Generate an SSH Key github/git
# https://zellwk.com/blog/github-actions-deploy/
cd ~/.ssh
ssh-keygen -t rsa -b 4096 -C "your_email@example.com"
ls # check pub key name
cat github-actions.pub >> authorized_keys

# enter three times
eval "$(ssh-agent -s)"
# ssh-add ~/.ssh/id_ed25519
# find .ssh folder in /home/user-name/.ssh   # hidden folder
# copy PUB file data and store it in github.com
# git clone with SSH not HTTPs
----------

---------- 
timedatectl set-local-rtc 1 --adjust-system-clock  #set time in dual boot 

----------- 
sed '/^$/d' input.txt > output.txt   # replace file without blank line 

------------ 
ip route get 1 | sed -n 's/^.*src \([0-9.]*\) .*$/\1/p'  # current IP Address 
netstat -pan | grep 80 
ifconfig | grep inet 

---------- 
sudo lshw -C network    # network name 
lspci | grep Network      # network name 

---------- 
sudo mokutil --sb-state      # secure boot status 
sudo apt install mokutil      # secure boot install 
sudo mokutil --disable-validation 
sudo mokutil --enable-validation 
sudo efibootmgr    # EFI Bootmanager status 

---------- 
tar -zcvf archive-name.tar.gz directory-name   # zip dir 
tar -xvzf next-bkup-25-11-21.tar.gz -C .   # Extract tar.gz file # . = FOLDER_PATH
tar -zcf WS-SMALL-MP.tar.gz .  # Remove v for verbose (OUTPUT Files Name)


scp -r ./uploads  root@192.168.1.1:/var/www/html/angular/ohc/server/    #copy local file to VPS 
#copy a file from a local server to a remote server
sudo scp -i my-pem-file.pem ./source/test.txt ec2-user@1.2.3.4:~/destination/
#copy a file from a remote server to a local machine
sudo scp -i my-pem-file.pem ec2-user@1.2.3.4:~/source/of/remote/test.txt ./where/to/put
#So the basically syntax is:-
scp -i my-pem-file.pem username@source:/location/to/file username@destination:/where/to/put
---------- 
#zip unzip
sudo apt install zip unzip
zip -r filename.zip folder
zip -r filename.zip folder1 folder2
zip -r filename.zip /path/to/folder1 /path/to/file2
zip -r data.zip data/
ls -l data.zip # Verify file with the ls command
# You can encrypt data.zip with a password by passing the -e option:
zip -r -e data.zip data/
# We can also use and state password on the CLI to encrypt zipfile entries:
zip -r -e -P 'YOUR_PASSWORD_HERE' output.zip /path/to/folder/


---------- 
pm2 start app.js 
pm2 list 
pm2 stop app.js/app 
pm2 start server.js --name "mb-cron" --watch
pm2 start server.js --name "mb-cron"
pm2 start server.js --name "mb-warehouse"
pm2 stop mb-cron
pm2 restart mb-cron
pm2 delete "mb-cron"
pm2 startup systemd  # set as startup
pm2 save # save for restart

#PM2
pm2 startup                   # Detect init system, generate and configure pm2 boot on startup
pm2 save                      # Save current process list
pm2 resurrect                 # Restore previously saved processes
pm2 unstartup                 # Disable and remove startup system

# next js for development
pm2 start npm --name "next" -- run dev

# next js for production
npm run build
pm2 start npm --name "next" -- start
#pm2 start npm --name "mb-frontend" -- start
PORT=3003 NODE_PORT=3003 pm2 start npm --name "next" -- start
pm2 restart all

# angular with pm2
pm2 start "ng serve"
pm2 start "ng serve --host 0.0.0.0"
pm2 start "ng serve --host 0.0.0.0 --port 8082"
pm2 start "ng serve --host 0.0.0.0 --port 8082" --name "My Angular App"
pm2 start "ng serve --host 0.0.0.0 --port 8082" --name "My Angular App" --watch /var/www/apps/my-angular-app

# nest JS
pm2 start dist/main.js --name "pms-api"

#pm2 startup autostart startup boot-time
pm2 startup
#[PM2] You have to run this command as root. Execute the following command:
#sudo su -c "env PATH=$PATH:/home/unitech/.nvm/versions/node/v14.3/bin pm2 startup <distribution> -u <user> --hp <home-path>
pm2 save

nginx/apache---------------------------- 
service nginx restart 
service nginx start 
service nginx stop 
sudo service apache2 stop 
sudo service apache2 restart
----------
# Node JS stake out of memory 
export NODE_OPTIONS="--max-old-space-size=8192"
export NODE_OPTIONS="--max-old-space-size=16384"
env | grep NODE_OPTIONS
node --max_old_space_size=4096 ./node_modules/@angular/cli/bin/ng build

--------------------  
sudo passwd <username>

--------------------  
ng build --prod --aot 
export NODE_ENV=production 
set 
echo $NODE_ENV 
printenv 
printenv | less 
printenv | more 
 
-------- 
1) npx create-react-app my-app --template redux # understand only # redux-toolkit  
2) npx create-react-app my-app and implement shopping cart into this 
-------- 
npm cache clean --force 
npm install npm@latest -g 
npm config set proxy localhost:3000   # EAI_AGAIN error  

-------- 
chmod 755 xampp-linux-*-installer.run
Run the installer
sudo ./xampp-linux-*-installer.run

--------
# Login with public key into AWS/VPS server
sudo chmod 400 '/home/user/Downloads/my-one-time.pem'
ssh -i '/home/user/Downloads/my-one-time.pem' ubuntu_user@11.22.333.140
sudo -i #root with pem key without passwd
su - #root with passwd
sudo chown -R $USER:$GROUP ~/.npm
sudo chown -R $USER:$GROUP ~/.config
sudo chown -R $(whoami):$(whoami) /var/www/html/YOUR_FOLDER
--------
# Increase swap memory to file
# https://help.ubuntu.com/community/SwapFaq#How_much_swap_do_I_need.3F
sudo swapon –show 
sudo fallocate -l 1G /swapfile 
if fallocate is not installed or you get an error message saying fallocate failed: Operation not supported then use the following command to create the swap file: 
sudo dd if=/dev/zero of=/swapfile bs=1024 count=1048576 
sudo chmod 600 /swapfile 
sudo mkswap /swapfile 
sudo swapon /swapfile 
To make the change permanent open the /etc/fstab file: 
sudo nano /etc/fstab 
PATH: /etc/fstab 
/swapfile swap swap defaults 0 0 
sudo swapon –show 
sudo free -h 
---------

------------------------
# FTP via command
wget --user=ZIZ001CP --password=1w2QC --output-document=/mnt/scpbuket/BoIaes_wk33.zip ftp://covs.garrs.cm/Bks/Upate/Boges_wk33.zip

------------------------
# User add in linux system
cat /etc/passwd
cat /etc/group

1) sudo useradd github
2) sudo passwd github
3) sudo usermod -a -G www-data github

------------------------
# CSR request in Linux / certificate SSL
sudo openssl req -new -newkey rsa:2048 -nodes -keyout website.nl.key -out website.nl.csr
# Country Name (2 letter code) [AU]:AU
# State or Province Name (full name) [Some-State]:ABC
# Locality Name (eg, city) []:AHM
# Organization Name (eg, company) [Internet Widgits Pty Ltd]:MYB BV
# Organizational Unit Name (eg, section) []:.
# Common Name (e.g. server FQDN or YOUR name) []:MYB BV
# Email Address []:abc@myb.nl


# ZIP without node_modules and others
zip -r ctas-deploy-server-all.zip . -x */node_modules/**\*
sudo zip -r ctas-deploy-server-all.zip . -x */node_modules/**\* */.next/**\* */.git/**\* */build/**\* */dist/**\* */.angular/**\* 
sudo zip -r -x */node_modules/**\* */.next/**\* */build/**\* */dist/**\* */.angular/**\* */amazon_logs/**\* */bol_logs/**\*  WR-SMALL-MP.zip .
# sudo zip -r WR-SMALL-MP.zip . -x */node_modules/**\* -x */.next/**\* -x */build/**\* -x */dist/**\* -x */.angular/**\* -x */amazon_logs/**\* -x */bol_logs/**\*  

# Working / Tested WS-Server
sudo zip -r WS-SMALL-MP.zip . -x "*node_modules*" -x "*.next/*" -x "*/build/**\*" -x "*/dist/**\*" -x "*/.angular/**\*" -x "*amazon_logs*" -x "*bol_logs*"  
sudo zip -r WS-SMALL-WR.zip . -x "*node_modules*" -x "*.next/*" -x "*/build/**\*" -x "*/dist/**\*" -x "*/.angular/**\*" -x "*amazon_logs*" -x "*bol_logs*" 

# snap refresh ubuntu
# cannot refresh "snap-store"
sudo snap refresh snap-store 
ps -e | grep snap-store #id blocking process
kill #id
sudo snap refresh

# Remove repository 
sudo add-apt-repository --remove ppa:PPA_REPOSITORY_NAME/PPA
sudo add-apt-repository --remove ppa:videolan/master-daily
